<% include ../../partials/header %>

<% include ../../partials/nav %>

<% include ../../partials/left-sidebar %>

<style>
    body {
        padding-right: 0px !important;
    }

    .dtp .p10 > a {
    color: white;
    text-decoration: none;
}
.dtp > .dtp-content > .dtp-date-view > header.dtp-header {
    background: #7e6990;
    color: #fff;
    text-align: center;
    padding: 0.3em;
}
.dtp div.dtp-date, .dtp div.dtp-time {
    background: #7e6990;
    text-align: center;
    color: #fff;
    padding: 10px;
}
.dtp table.dtp-picker-days tr > td > a.selected {
    background: #7e6990;
    color: #fff;
}


/*dropdown style*/
.dropdown-menu {
    min-width: 100% !important;
}
.dropdown-custom {
    width: 100%;
}
.dropdown-content-custom {
    background-color: #fff;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    border: 1px solid #f1f1f1;
    z-index: 1;
    max-height: 250px;
    overflow-y: scroll;
    top: 38px !important;
  }


</style>
<div id="add_data_section">
    <!-- Main Content -->
    <section class="content">

        <% include ../../partials/content/header %>

        <div class="container-fluid">

            <div class="row clearfix">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="header">
                            <h2><strong>Create</strong> Warehouse General Journal</h2>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-lg-6 offset-lg-3">
                                    <% include ../notification/message %>
                                </div>
                            </div>
                            <form @submit.prevent="addGeneralJournal()">       
                            <div class="row clearfix">
                                <div class="col-sm-12">
                                    <h6 class="mt-2 mb-2">General Journal Type</h6>
                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group">
                                        <div class="radio inlineblock m-r-20">
                                            <input type="radio" name="general_journal_type" id="debit"
                                                v-model="general_journal_type" class="with-gap" :value="false">
                                            <label for="debit">Debit</label>
                                        </div>
                                        <div class="radio inlineblock">
                                            <input type="radio" name="general_journal_type" id="credit"
                                                v-model="general_journal_type" class="with-gap" :value="true">
                                            <label for="credit">Credit</label>
                                        </div>
                                    </div>
                                </div>
                            </div>    
                            <div class="row clearfix">
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Group<span style="color: red;">*</span></h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="groupName"
                                            @keyup="filterGroupList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown" placeholder="select a Group" required>

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="groupSearchData({id: group._id, name: group.name})"
                                                v-for="(group, index) in groupFilter"
                                                :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{group.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">SubGroup<span style="color: red;">*</span></h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="subgroupName"
                                            @keyup="filterSubGroupList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown"
                                            placeholder="select a SubGroup" required>

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="subgroupSearchData({id: subgroup._id, name: subgroup.name})"
                                                v-for="(subgroup, index) in subgroupFilter"
                                                :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{subgroup.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Category<span style="color: red;">*</span></h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="categoryName"
                                            @keyup="filterCategoryList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown"
                                            placeholder="select a Category" required>
                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="categorySearchData({id: category._id, name: category.name, pay_to_supplier: category.pay_to_supplier})"
                                                v-for="(category, index) in categoryFilter"
                                                :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{category.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6" v-if="supplierShow==false">
                                    <h6 class="mt-2 mb-2">Subcategory<span style="color: red;">*</span></h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="subcategoryName"
                                            @keyup="filterSubCategoryList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown"
                                            placeholder="select a Subcategory">

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="subcategorySearchData({id: subcategory._id, name: subcategory.name, create: subcategory.create})"
                                                v-for="(subcategory, index) in subcategoryFilter"
                                                :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{subcategory.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6" v-if="supplierShow==true">
                                    <h6 class="mt-2 mb-2">Supplier</h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="supplierName"
                                            @keyup="filterSupplierList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown" placeholder="Supplier Name"
                                            disabled>

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="supplierSearchData({id: supplier._id, name: supplier.name})"
                                                v-for="(supplier, index) in supplierFilter"
                                                :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{supplier.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Cheque no</h6>
                                    <div class="form-group">
                                        <input type="text" v-model="slip"
                                            class="form-control" placeholder="Cheque no" :disabled="slipDisable">
                                    </div>
                                </div>
                                
                                <div class="col-sm-12">
                                    <h6 class="mt-4 mb-4 text-center" style="font-size: 12px;">Common
                                        Information<span style="color: red;">*</span> </h6>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Date</h6>
                                    <div class="form-group">
                                        <input type="text" id="record_date"
                                            class="form-control datetimepicker"
                                            placeholder="Select Date" required>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Voucher</h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="voucherName"
                                            @keyup="filterVoucherList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown" placeholder="select a voucher" :disabled="voucherDisable">

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="voucherSearchData({id: voucher._id, name: voucher.name})"
                                                v-for="(voucher, index) in voucherFilter" :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{voucher.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6"
                                    v-if="supplierShow == true">
                                    <h6 class="mt-2 mb-2">Receiving No</h6>
                                    <div class="form-group">
                                        <input type="text" v-model="receiving_no" class="form-control"
                                            placeholder="Receiving No" @keyup="disableRequisition"
                                            @change="getReceivingInfo"
                                            :disabled="receivingDisable==true">
                                    </div>
                                </div>
                                <div class="col-sm-6"
                                    v-if="supplierShow == true">
                                    <h6 class="mt-2 mb-2">Requisition No</h6>
                                    <div class="form-group">
                                        <input type="text" v-model="requisition_no" class="form-control"
                                            placeholder="Requisition No" @keyup="disableReceiving"
                                            @change="getRequisitionInfo"
                                            :disabled=" requisitionDisable==true">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Currency</h6>
                                    <div class="form-group  dropdown dropdown-custom">
                                        <input type="text" v-model="currencyName"
                                            @keyup="filterCurrencyList()"
                                            class="form-control searchField dropdown-toggle"
                                            data-toggle="dropdown" placeholder="select a currency">

                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="currencySearchData({id: currency._id, name: currency.name, rate: currency.conversion_rate})"
                                                v-for="(currency, index) in currencyFilter" :key="index"
                                                class="dropdown-item text-capitalize"
                                                href="">{{currency.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <h6 class="mt-2 mb-2">Amount</h6>
                                    <div class="form-group">
                                        <input type="number" v-model="amount" class="form-control"
                                            placeholder="Amount" @change="checkAmount"
                                            :disabled="amountDisable">
                                    </div>
                                    <p style="color: rgb(163, 22, 22);" v-show="amountWaring && supplierShow"> <b>You can place
                                            maximum {{this.totalAmount}} TK.</b></p>
                                    <p style="color: #7e6990;" v-show="paidWaring && supplierShow"> <b>Already Paid {{this.paidAmount}} TK.
                                            You Need To Pay {{this.need_to_pay}} TK.</b></p>
                                    <p style="color: #7e6990;" v-show="paidWaring==false && needToPayWarning && supplierShow"><b>You Need To Pay
                                            {{this.totalAmount}} TK.</b> </p>
                                    <p style="color: #7e6990;" v-show="converted_amount_show"><b>
                                        {{this.otherCurrencyAmount}} {{this.currencyName}} == {{this.amount}} Tk (conversion rate {{this.conversion_rate}})</b> </p>
                                </div>
                                <div class="col-sm-12">
                                    <h6 class="mt-2 mb-2">Naration</h6>
                                    <div class="form-group">
                                        <textarea class="form-control" v-model="narration" :disabled="narationDisable"
                                            placeholder="Write a naration" rows="4"></textarea>
                                    </div>
                                </div>
                                
                                <div class="col-lg-12">
                                    <button type="submit"
                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                    data-keyboard="false"><i class="zmdi zmdi-plus"></i></button>
                                    <button type="submit"
                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                    data-keyboard="false"><i class="zmdi zmdi-circle"></i></button>
                                </div>   
                            </div>
                        </form>
                            <div class="row clearfix">
                                <div class="col-lg-12">
                                    <div class="cart_management">
                                        <div class="col-sm-12">
                                            <h6 class="mt-2 mb-2">General Journal Details</h6>
                                            <div class="table-responsive">
                                                <table
                                                    class="table td_2 table-striped table-hover js-basic-example dataTable text-center"
                                                    id="infoListTable">
                                                    <thead>
                                                        <tr>
                                                            <th>SL</th>
                                                            <th>Type</th>
                                                            <th>Group</th>
                                                            <th>SubGroup</th>
                                                            <th>Category</th>
                                                            <th>Subcategory/Supplier</th>
                                                            <th>Voucher</th>
                                                            <th>Currency</th>
                                                            <th>Slip</th>
                                                            <th>Amount</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody v-if="createdJournals.length > 0 ">
                                                        <tr v-for="(requestDetails, index) in createdJournals" key="index">
                                                            <td>{{index + 1}}</td>
                                                            <td>{{requestDetails.type ? 'credit' : 'debit'}}</td>
                                                            <td>{{requestDetails.groupName}}</td>
                                                            <td>{{requestDetails.subgroupName}}</td>
                                                            <td>{{requestDetails.categoryName}}</td>
                                                            <td>{{requestDetails.subcategory ? requestDetails.subcategoryName : requestDetails.supplierName}}</td>
                                                            <td>{{requestDetails.voucherName}}</td>
                                                            <td>{{requestDetails.currencyName}}</td>
                                                            <td>{{requestDetails.slip}}</td>
                                                            <td>{{requestDetails.amount}}</td>
                                                            <td>
                                                                <div @click="removeInfo(index)"
                                                                    title="remove"><i class="zmdi zmdi-close"></i>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                    <tbody v-else>
                                                        <tr>
                                                            <td class="text-center" colspan="12">No data found here</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                            
                                        </div>

                                        
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-2">
                                <div class="col-lg-3 offset-lg-1">
                                    <h6 class="mt-2 mb-2"> Credit Balance</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" :value="creditBalance" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-3 offset-lg-1">
                                    <h6 class="mt-2 mb-2"> Debit Balance</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" :value="debitBalance" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-3 offset-lg-1">
                                    <h6 class="mt-2 mb-2">Closing Balance</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" :value="closingBalance" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <button type="submit"
                                        class="btn btn-primary waves-effect" data-backdrop="static"
                                        data-keyboard="false" @click="saveGeneralJournal" :disabled="isLoading || saveDisable">Save</button>
                                        <button type="submit"
                                        class="btn btn-primary waves-effect" data-backdrop="static"
                                        data-keyboard="false" @click="resetAllFields()">Reset</button>
                                        
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

</div>


<script>
    new Vue({
        el: '#add_data_section',
        data: {
            searchPageNo: 1,
            searchedItemCount: {
                total: 0,
                loadMore: false
            },
            allSearchedData: [],
            isSearchLoading: false,
            searchText: '',
            orderID: null,
            branch: '',
            errorResponse: null,
            successResponse: null,
            isDisable: false,
            isLoading: false,
            isUpdateState: false,
            requsitionID: null,
            requsitionNoShow: null,
            requisition_date: "",
            expected_date: "",
            requisition_to_warehouse: true,
            allSupplier: [],
            allGroup: [],
            allSubgroup: [],
            allCategory: [],
            allSubcategory: [],
            productName: "",
            purposeList: [],
            purpose: "",
            remarks: "",
            supplierWiseProductListFilter: [],
            supplierWiseProductList: [],
            barcode: "",
            measurementUnitList: [],
            measurementUnit: "",
            costPrice: null,
            currentStock: null,
            total: 0,
            quantity: 0,
            vat: 0,
            selectedItem: "",
            createdJournals: [],
            closingBalance: null,
            grandTotal: null,
            searchSupplier: "",
            requisitionNo: "",
            _id: "",
            downloadRequestID: null,
            searchQueryStringRequest: '',
            adminAccess: [],
            general_journal_type: true,
            amount: 0,
            narration: '',
            groupName: "",
            group: "",
            groupFilter: [],
            subgroupName: "",
            subgroup: "",
            subgroupFilter: [],
            categoryFilter: [],
            categoryName: "",
            subcategoryName: "",
            subcategory: "",
            subcategoryFilter: [],
            voucherName: "",
            voucher: "",
            voucherFilter: [],
            currencyName: "",
            currency: "",
            conversion_rate: 0,
            otherCurrencyAmount: 0,
            currencyFilter: [],
            slip: '',
            supplierShow: false,
            supplierFilter: [],
            supplierName: '',
            supplier: '',
            receiving_no: '',
            requisition_no: '',
            supplier_selected: false,
            requisitionDisable: false,
            receivingDisable: false,
            totalAmount: 0,
            amountDisable: false,
            pay_to_supplier: false,
            amountWaring: false,
            paidWaring: false,
            needToPayWarning: false,
            paidAmount: 0,
            need_to_pay: 0,
            receiving_no_temp: '',
            converted_amount_show: false,
            debitBalance: null,
            creditBalance: null,
            saveDisable: true,
            voucherDisable: false,
            dateDisable: false,
            narationDisable: false,
            slipDisable: false,
            subcategoryCreate: "",
            dateAlert: false
        },
        mounted() {
            this.adminAccess = '<%= data.adminInfo.admin_roles %>'.split(',')
            this.getCurrentDate()
            this.getGroupInfo()
            this.getVoucherInfo()
            this.getCurrencyInfo()
        },
        methods: {
            filterGroupList() {
                if (this.group != "") {
                    let search = new RegExp(this.group, 'i');
                    this.groupFilter = this.allGroup.filter(groupInfo => search.test(groupInfo.name))
                } else {
                    this.groupFilter = this.allGroup
                }
            },
            filterSubGroupList() {
                if (this.subgroup != "") {
                    let search = new RegExp(this.subgroup, 'i');
                    this.subgroupFilter = this.allSubgroup.filter(subgroupInfo => search.test(subgroupInfo.name))
                } else {
                    this.subgroupFilter = this.allSubgroup
                }
            },
            filterCategoryList() {
                if (this.category != "") {
                    let search = new RegExp(this.category, 'i');
                    this.categoryFilter = this.allCategory.filter(categoryInfo => search.test(categoryInfo.name))
                } else {
                    this.categoryFilter = this.allCategory
                }
            },
            filterSubCategoryList() {
                if (this.subcategory != "") {
                    let search = new RegExp(this.subcategory, 'i');
                    this.subcategoryFilter = this.allSubcategory.filter(subcategoryInfo => search.test(subcategoryInfo.name))
                } else {
                    this.subcategoryFilter = this.allSubcategory
                }
            },
            filterSupplierList() {
                if (this.supplier != "") {
                    let search = new RegExp(this.supplier, 'i');
                    this.supplierFilter = this.allSupplier.filter(supplierInfo => search.test(supplierInfo.name))
                } else {
                    this.supplierFilter = this.allSupplier
                }
            },
            filterCurrencyList() {
                if (this.currencyName != "") {
                    let search = new RegExp(this.currencyName, 'i');
                    this.currencyFilter = this.allCurrency.filter(currencyInfo => search.test(currencyInfo.name))
                } else {
                    this.currencyFilter = this.allCurrency
                }
            },
            filterVoucherList() {
                if (this.voucherName != "") {
                    let search = new RegExp(this.voucherName, 'i');
                    this.voucherFilter = this.allVoucher.filter(voucherInfo => search.test(voucherInfo.name))
                } else {
                    this.voucherFilter = this.allVoucher
                }
            },
            groupSearchData(data) {
                this.groupName = data.name
                this.group = data.id
                this.getSubgroupInfo(data.id)
            },
            subgroupSearchData(data) {
                this.subgroupName = data.name
                this.subgroup = data.id
                this.getCategoryInfo(data.id)
            },
            categorySearchData(data) {
                this.categoryName = data.name
                this.category = data.id
                this.pay_to_supplier = data.pay_to_supplier
                if (data.pay_to_supplier == true) {
                    this.supplierShow = true
                    this.amountDisable = true
                    this.supplier_selected = true
                    this.getSupplierInfo(data.id)
                } else {
                    this.supplierShow = false
                    this.amountDisable = false
                    this.supplier_selected = false
                    this.getSubCategoryInfo(data.id)
                }

            },
            subcategorySearchData(data) {
                this.subcategoryName = data.name
                this.subcategory = data.id
                this.subcategoryCreate = data.create
                
            },
            supplierSearchData(data) {
                this.supplierName = data.name
                this.supplier = data.id
            },
   
            currencySearchData(data) {
                this.currencyName = data.name
                this.currency = data.id
                this.conversion_rate = data.rate
                if(data.name == 'bdt'){
                    this.converted_amount_show = false
                    this.otherCurrencyAmount = 0
                }
            },
            voucherSearchData(data) {
                this.voucherName = data.name
                this.voucher = data.id
            },
            getGroupInfo() {
                let requestLink = '/api/accounts/chart/group'
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        this.allGroup = result.response.data
                        this.groupFilter = result.response.data
                    }
                })
            },
            getSubgroupInfo(value) {
                let requestLink = '/api/accounts/chart/subgroup/group-wise/' + value
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        this.allSubgroup = result.response.data
                        this.subgroupFilter = result.response.data
                    }
                })
            },
            getCategoryInfo(value) {
                let requestLink = '/api/accounts/chart/category/subgroup-wise/' + value
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        this.allCategory = result.response.data
                        this.categoryFilter = result.response.data
                    }
                })
            },
            getSubCategoryInfo(value) {
                let requestLink = '/api/accounts/chart/subcategory/category-wise/' + value
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    
                    if (result.auth === true) {
                        this.allSubcategory = result.response.data
                        this.subcategoryFilter = result.response.data
                    }
                })
            },
            getSupplierInfo() {
                let requestLink = '/api/supplier?activeSupplier=true&warehouseSupplier=true'
                getType(requestLink).then((result) => {
                    if (result.auth === true) {
                        this.allSupplier = result.response.data
                        this.supplierFilter = result.response.data
                    }
                })
            },
            getCurrencyInfo() {
                let requestLink = '/api/accounts/settings/currency'
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        this.allCurrency = result.response.data
                        this.currencyFilter = result.response.data

                        this.currencyFilter.map((currencyInfo) => {
                            if(currencyInfo.name == 'bdt'){
                                this.currencyName = currencyInfo.name
                                this.currency = currencyInfo._id
                            }
                        })
                    }
                })
            },
            getVoucherInfo() {
                let requestLink = '/api/accounts/settings/voucher'
                let token = localStorage.getItem('token')
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        this.allVoucher = result.response.data
                        this.voucherFilter = result.response.data
                    }
                })
            },
            disableRequisition() {
                this.requisitionDisable = true
                this.receivingDisable = false
                if (this.receiving_no == '') {
                    this.requisitionDisable = false
                }
            },
            disableReceiving() {
                this.receivingDisable = true
                this.requisitionDisable = false
                if (this.requisition_no == '') {
                    this.receivingDisable = false
                }
            },
            getReceivingInfo() {
                let branch = ''
                this.clear_warning_amont()
                let token = localStorage.getItem('token')
                if (this.receiving_no != '') {
                    let requestLink = '/api/accounts/generaljournal/search/supplier/receiving/' + this.receiving_no + '?branch=' + branch
                    getSecureData(requestLink, token).then((result) => {
                        
                        let requisition_no = ''
                        if (result.auth === true) {
                            
                            this.totalAmount = (result.response.data != null) ? result.response.data.totalAmount : 0
                            requisition_no = result.response.data.requisitionID ? result.response.data.requisitionID.serialNo : ''
                            this.needToPayWarning = true
                            this.supplierName = result.response.data.supplier.name
                            this.supplier = result.response.data.supplier._id
                        }
                        this.getGeneralJournalInfo(requisition_no)
                    })
                    
                }
            },
            getRequisitionInfo() {
                let branch = ''
                this.clear_warning_amont()
                let token = localStorage.getItem('token')
                if (this.requisition_no != '') {
                    let requestLink = '/api/accounts/generaljournal/search/supplier/requisition/' + this.requisition_no + '?branch=' + branch
                    getSecureData(requestLink, token).then((result) => {

                        if (result.auth === true) {
                            this.totalAmount = (result.response.data != null) ? result.response.data.totalAmount : 0
                            this.needToPayWarning = true
                            this.supplierName = result.response.data.supplier.name
                            this.supplier = result.response.data.supplier._id
                        }
                        this.getGeneralJournalInfo(this.requisition_no)
                    })  
                }
            },
            checkAmount() {
                let errors = []
                if(this.currencyName !== "bdt"){
                    this.otherCurrencyAmount = this.amount
                    this.amount = this.amount * this.conversion_rate
                    this.converted_amount_show = true
                }else{
                    this.converted_amount_show = false
                    this.otherCurrencyAmount = 0
                }
                
                if (this.supplierShow == true) {
                    if (this.need_to_pay == 0) {
                        if (this.amount > this.totalAmount) {
                            if (this.receiving_no != '') {
                                errors.push({
                                    msg: 'Amount is higher than Receiving Amount..'
                                })
                                this.errorResponse = errors

                            }
                            if (this.requisition_no != '') {
                                errors.push({
                                    msg: 'Amount is higher than Requisition Amount..'
                                })
                                this.errorResponse = errors

                            }
                            this.isDisable = true
                            this.amountWaring = true
                            this.needToPayWarning = false
                            $('html, body').animate({
                                scrollTop: 0
                            }, 'slow', function () { });
                        } else {
                            this.isDisable = false
                            this.amountWaring = false
                        }
                    } else {
                        if (this.amount > this.need_to_pay) {
                            if (this.receiving_no != '') {
                                errors.push({
                                    msg: 'Amount is higher than Need To Pay Amount..'
                                })
                                this.errorResponse = errors
                            }
                            if (this.requisition_no != '') {
                                errors.push({
                                    msg: 'Amount is higher than Need To Pay Amount..'
                                })
                                this.errorResponse = errors

                            }
                            this.isDisable = true
                            this.paidWaring = true
                            $('html, body').animate({
                                scrollTop: 0
                            }, 'slow', function () { });
                        } else {
                            this.isDisable = false
                            this.amountWaring = false
                            this.paidWaring = false
                            this.needToPayWarning = false
                        }
                    }

                }
            },
            getGeneralJournalInfo(value) {
                let requestLink = '/api/accounts/generaljournal?'
                let token = localStorage.getItem('token')
                let errors = []
                
                if (this.receiving_no == '') {
                    this.requisition_no = value
                    value = ''
                }
                if (this.requisition_no == '') {
                    this.receiving_no_temp = this.receiving_no
                }
                if (this.general_journal_type) {
                    requestLink += 'type=1'
                }else{
                    requestLink += 'type=0'
                }
                if (this.supplier != '') {
                    requestLink += '&&supplier=' + this.supplier
                }
                if (this.requisition_no != '') {
                    if (this.supplier == '') {
                        requestLink += 'pay_with_requisition_no=' + this.requisition_no
                    } else {
                        requestLink += '&pay_with_requisition_no=' + this.requisition_no
                    }
                }
                if (this.receiving_no != '') {
                    if (this.supplier == '' && this.requisition_no == '') {
                        requestLink += 'pay_with_receiving_no=' + this.receiving_no
                    } else {
                        requestLink += '&pay_with_receiving_no=' + this.receiving_no
                    }
                }
                
                getSecureData(requestLink, token).then((result) => {
                    if (result.auth === true) {
                        
                        if (result.response.data.length != 0) {
                            result.response.data.map((data) => {
                                if (data.pay_with_requisition_no != null) {
                                    if (Number(this.requisition_no) == data.pay_with_requisition_no) {
                                        this.paidAmount += data.amount
                                    }
                                } else {
                                    if (Number(this.receiving_no) == data.pay_with_receiving_no) {
                                        this.paidAmount += data.amount
                                    }
                                }
                            })
                        }
                        if (value == '') {
                            this.receiving_no = this.receiving_no_temp
                            if (this.receiving_no != '') {
                                this.requisition_no = ''
                            }
                            if (this.paidAmount != 0) {
                                if (Number(this.totalAmount) == Number(this.paidAmount)) {
                                    errors.push({
                                        msg: 'This Supplier is Already Paid'
                                    })
                                    this.errorResponse = errors
                                    this.amountDisable = true
                                    this.amountWaring = false
                                    this.needToPayWarning = false
                                    this.isDisable = true
                                    $('html, body').animate({
                                        scrollTop: 0
                                    }, 'slow', function () { });
                                }
                                if (Number(this.totalAmount) != Number(this.paidAmount)) {
                                    this.need_to_pay = Number(this.totalAmount) - Number(this.paidAmount)
                                    this.paidWaring = true
                                    this.needToPayWarning = false
                                }
                            }
                        } else {
                            this.receiving_no = ''
                            this.getGeneralJournalInfo(value)
                        }
                    }
                })
            },
            clear_forms() {
                this.groupName = ''
                this.subgroupName = ''
                this.categoryName = ''
                this.subcategoryName = ''
                this.amount = ''
                this.receiving_no = ''
                this.requisition_no = ''
                this.supplier = ''
                this.supplierName = ''
                this.paidWaring = false
                this.needToPayWarning = false
                this.amountWaring = false
                this.supplierShow = false
                this.supplierShow = false
                this.pay_to_supplier = false
                this.otherCurrencyAmount = 0
                this.converted_amount_show = false
            },
            clear_forms_afterSave(){
                this.voucherDisable = false
                this.dateDisable = false
                this.narationDisable = false
                this.slipDisable = false
                this.voucherName = ''
                this.slip = ''
                this.creditBalance = null
                this.debitBalance = null
                this.closingBalance = null
            },
            clear_warning_amont() {
                this.totalAmount = 0
                this.amountDisable = false
                this.amountWaring = false
                this.paidWaring = false
                this.need_to_pay = 0
                this.paidAmount = 0
                this.needToPayWarning = false
                this.isDisable = false
            },
            checkDate(){
                let record_date = $("#record_date").val()
                record_date = new Date(record_date);
                this.subcategoryCreate = new Date(this.subcategoryCreate)
            },
            saveGeneralJournal(){
                if(this.createdJournals.length>0){
                    this.isLoading = true
                    let requestLink = '/api/accounts/generaljournal'
                    let token = localStorage.getItem('token')

                    let itemInfo= {
                        credit_balance: this.creditBalance,
                        debit_balance: this.debitBalance,
                        closing_balance: this.closingBalance,
                        journals: this.createdJournals
                    }
                    addNewType(requestLink, itemInfo, token).then((result) => {
                        if (result.auth == true) {
                            this.successResponse = result.response
                            this.clear_forms()
                            this.createdJournals = []
                            this.clear_forms_afterSave()
                        } else {
                            this.errorResponse = result.response
                        }
                        this.isLoading = false

                        $("#record_date").val("")
                        this.narration = ''
                        $('html, body').animate({
                            scrollTop: 0
                        }, 'slow', function () {});
                    })
                }else{
                    alert("Sorry no Journal created yet.")
                }
            },
            totalCalculation(){
                let debitBalance = 0
                let creditBalance = 0
                this.createdJournals.map((requestDetail, index)=>{
                    if(requestDetail.type == false){
                        debitBalance += Number(requestDetail.amount)
                    }else{
                        creditBalance += Number(requestDetail.amount)
                    }
                    if((this.createdJournals.length-1)==index){
                        this.debitBalance = debitBalance
                        this.creditBalance = creditBalance
                        this.closingBalance = (creditBalance - debitBalance)
                    }
                })
            },
            resetAllFields(){
                this.clear_forms()
                this.getSupplierInfo()
                this.downloadRequestID = null
                this.isUpdateState = false
                this.requsitionID = null
                this.requsitionNoShow = null
                this.requestedProducts = []
                this.supplierWiseProductList = []
                this.supplier = ""
                this.supplierName = ""
                this.purpose = ""
                this.remarks = ""
                this.totalQuantity = null
                this.grandTotal = null
            },
            removeInfo(index) {
                this.clear_forms()
                this.createdJournals.splice(index, 1)
                this.totalCalculation()
                if(this.createdJournals.length == 0){
                    this.debitBalance = null
                    this.creditBalance = null
                    this.closingBalance = null
                    this.voucherDisable = false
                    this.narationDisable = false
                    this.slipDisable = false
                    this.slip = ""
                    this.voucher = ""
                    this.narration = ""
                }
            },
            addGeneralJournal(){
                let itemInfo = {
                    type: this.general_journal_type,
                    group: this.group,
                    groupName: this.groupName,
                    subgroup: this.subgroup,
                    subgroupName: this.subgroupName,
                    category: this.category,
                    categoryName: this.categoryName,
                    slip: this.slip,
                    voucher: this.voucher,
                    voucherName: this.voucherName,
                    currency: this.currency,
                    currencyName: this.currencyName,
                    amount: this.amount,
                    narration: this.narration,
                    record_date: $("#record_date").val()
                }

                if (this.pay_to_supplier) {
                    itemInfo.pay_to_supplier = this.pay_to_supplier
                    itemInfo.supplier = this.supplier
                    itemInfo.supplierName = this.supplierName
                    if (this.receiving_no != '') {
                        itemInfo.pay_with_receiving_no = this.receiving_no
                    }
                    if (this.requisition_no != '') {
                        itemInfo.pay_with_requisition_no = this.requisition_no
                    }
                } else {
                    itemInfo.pay_to_supplier = this.pay_to_supplier
                    itemInfo.subcategory = this.subcategory
                    itemInfo.subcategoryName = this.subcategoryName
                }

                // let journal_create_date = new Date($("#record_date").val());
                // this.subcategoryCreate = new Date(this.subcategoryCreate)
                
                // if(journal_create_date.getTime() < this.subcategoryCreate.getTime()){
                //     this.dateAlert = true
                //     alert("Journal Date Must Be Same or higher than Subcategory Create Date")
                // }else{
                //     this.dateAlert = false
                // }

                if(!this.dateAlert){
                    this.createdJournals.push(itemInfo)
                    this.totalCalculation()
                    if(this.closingBalance == 0){
                        this.saveDisable = false
                    }else{
                        this.saveDisable = true
                    }
                    this.clear_forms()
                    this.voucherDisable = true
                    this.dateDisable = true
                    this.narationDisable = true
                    this.slipDisable = true
                }
            },
            getCurrentDate(){
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();
                    
                today = yyyy + '-' + mm + '-' + dd;

                this.expected_date = today
                this.requisition_date = today
            },
            clearResponseMessage() {
                this.errorResponse = null
                this.successResponse = null
            }
        }
    })
</script>

<script>
$(function () {
    //Datetimepicker plugin
    $('.datetimepicker').bootstrapMaterialDatePicker({
        format: 'YYYY-MM-DD',
        clearButton: true,
        weekStart: 1,
        time: false
    });
  });

  $("#add_data_section" ).on( 'wheel', function() {
    $('input[type=number]').on('mousewheel',function(e){ $(this).blur(); });
 });
  </script>

<% include ../../partials/footer %>
