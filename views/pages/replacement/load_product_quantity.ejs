<% include ../../partials/header %>

<% include ../../partials/nav %>

<% include ../../partials/left-sidebar %>

<style>
    body {
        padding-right: 0px !important;
    }

    .dtp .p10 > a {
    color: white;
    text-decoration: none;
}
.dtp > .dtp-content > .dtp-date-view > header.dtp-header {
    background: #7e6990;
    color: #fff;
    text-align: center;
    padding: 0.3em;
}
.dtp div.dtp-date, .dtp div.dtp-time {
    background: #7e6990;
    text-align: center;
    color: #fff;
    padding: 10px;
}
.dtp table.dtp-picker-days tr > td > a.selected {
    background: #7e6990;
    color: #fff;
}


/*dropdown style*/
.dropdown-custom {
    width: 100%;
  }
  
  .dropdown-content-custom {
    background-color: #fff;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    border: 1px solid #f1f1f1;
    z-index: 1;
    width: 90%;
    max-height: 250px;
    overflow-y: scroll;
    top: 38px !important;
  }

  .dropdown-custom > .searchField{
      width: 80% !important;
  }

</style>
<div id="add_data_section">

    <!-- Main Content -->
    <section class="content">

        <% include ../../partials/content/header %>

        <div class="container-fluid">

            <div class="row clearfix">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="header">
                            <h2><strong>Load Product</strong> For Replace Software</h2>
                            <div class="row">
                                <div class="col-sm-12 text-center">
                                    <p class="text-center text-primary">Your current branch is :
                                        <strong>{{branch.name}}</strong></p>
                                    <button @click="changeBranch" class="btn btn-primary">Change Branch</button>
                                </div>
                            </div>
                        </div>
                        <div class="body">
                            <div class="row">
                                <div class="col-lg-6 offset-lg-3">
                                    <% include ../notification/message %>
                                </div>
                            </div>
                            <form @submit.prevent="addProduct()">   
                            <div class="row clearfix">
                                <div class="col-sm-12">
                                    <h6 class="mt-2 mb-2">Product Load On Scan</h6>
                                </div>
                                <div class="col-sm-12">
                                    <div class="form-group">
                                        <div class="radio inlineblock m-r-20">
                                            <input type="radio" name="product_load_on_scan" id="active_yes"
                                                v-model="product_load_on_scan" @change="changeProductAddOnScan()" class="with-gap" :value="true">
                                            <label for="active_yes">Yes</label>
                                        </div>
                                        <div class="radio inlineblock">
                                            <input type="radio" name="product_load_on_scan" id="active_no"
                                                v-model="product_load_on_scan" @change="changeProductAddOnScan()" class="with-gap" :value="false">
                                            <label for="active_no">No</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row clearfix">
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Category <span style="color: red;">*</span></h6>
                                    <div class="form-group form-inline dropdown dropdown-custom">
                                        <input type="text" v-model="categoryName" @keyup="filterCategoryList()"  class="form-control searchField dropdown-toggle" data-toggle="dropdown"
                                        placeholder="select a category" :disabled="requestedProducts.length > 0">
                                        
                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="supplierSearchData({id: category._id, name: category.name})"
                                            v-for="(category, index) in categoryFilter" :key="index"
                                            class="dropdown-item text-capitalize" href="">{{category.name}}</a>
                                        </div>
                                        <button type="button" class="btn btn-primary waves-effect" @click="getProductCategoryWise()" style="padding: 10px 20px;margin: 0;"><i class="zmdi zmdi-refresh"></i></button>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Product Barcode</h6>
                                    <div class="form-group">
                                        <input style="width: 100%;" type="text" v-model="barcode"
                                            @change="getBarCode($event, barcode)" id="barcodeField" class="form-control"
                                            placeholder="Product Barcode">
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Item</h6>
                                    <div class="form-group dropdown-custom dropdown">
                                        <input type="text" v-model="productName" @keyup="filterSupplierWiseProductList()"  class="form-control searchField dropdown-toggle" data-toggle="dropdown"
                                        placeholder="select a product" style="width:100% !important" :disabled="isSearchLoading">
                                        
                                        <div class="dropdown-menu dropdown-content-custom">
                                            <a @click.prevent="categoryWiseProductSearchData(product)"
                                            v-for="(product, index) in categoryWiseProductListFilter" :key="index"
                                            class="dropdown-item text-capitalize" href="">{{product.name}}</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Cost Price</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" @change="changeCostPrice(costPrice)" v-model="costPrice"
                                        placeholder="Cost Price" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Current Stock</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" v-model="currentStock"
                                        placeholder="Current Stock" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Total</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" v-model="total"
                                        placeholder="Total" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="mt-2 mb-2">Quantity</h6>
                                    <div class="form-group">
                                        <input type="number" class="form-control" @change="changeQuantity"
                                        placeholder="Quantity" v-model="quantity" min="0.0001" step="any" :disabled="isSearchLoading">
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <button type="submit"
                                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                                    data-keyboard="false"><i class="zmdi zmdi-plus"></i></button>
                                                    <button type="submit"
                                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                                    data-keyboard="false"><i class="zmdi zmdi-circle"></i></button>
                                </div>   
                            </div>
                        </form>
                            <div class="row clearfix">
                                <div class="col-lg-12">
                                    <div class="cart_management">
                                        <div class="col-sm-12">
                                            <h6 class="mt-2 mb-2">Product Details</h6>
                                            <div class="table-responsive">
                                                <table
                                                    class="table td_2 table-striped table-hover js-basic-example dataTable text-center"
                                                    id="infoListTable">
                                                    <thead>
                                                        <tr>
                                                            <th>SL</th>
                                                            <th>Barcode</th>
                                                            <th>Name</th>
                                                            <th>M. Unit</th>
                                                            <th>Req. Price</th>
                                                            <th>Sales Price</th>
                                                            <th>Req. Qty</th>
                                                            <th>St. Qty</th>
                                                            <th>Total</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody v-if="requestedProducts.length > 0 ">
                                                        <tr v-for="(requestDetails, index) in requestedProducts" key="index">
                                                            <td>{{index + 1}}</td>
                                                            <td>{{requestDetails.product.barcode}}</td>
                                                            <td style="width: 100px;">{{requestDetails.product.name}}</td>
                                                            <td>{{requestDetails.product.unit}}</td>
                                                            <td>
                                                                <input type="number" @change="updateInfo(index)" :id="'purchase_price_'+index" :value="requestDetails.product.price.purchase" disabled>
                                                            </td>
                                                            <td>
                                                                <input type="number" @change="updateInfo(index)" :id="'sell_price_'+index" :value="requestDetails.product.price.sell" disabled>
                                                            </td>
                                                            <td>
                                                                <input type="number" @change="updateInfo(index)" :id="'quantity_'+index" :value="requestDetails.product.quantity" min="0" step="any">
                                                            </td>
                                                            <td>
                                                                {{requestDetails.product.stock}}
                                                            </td>
                                                            <td>
                                                                {{requestDetails.product.total}} tk.</td>
                                                            <td>
                                                                <div @click="removeInfo(index)"
                                                                    title="remove"><i class="zmdi zmdi-close"></i>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                    <tbody v-else>
                                                        <tr>
                                                            <td class="text-center" colspan="12">No data found here</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                            
                                        </div>

                                        
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-3 offset-lg-3">
                                    <h6 class="mt-2 mb-2">Total Quantity</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" :value="totalQuantity" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <h6 class="mt-2 mb-2">Grand Total</h6>
                                    <div class="form-group">
                                        <input type="text" class="form-control" :value="grandTotal" disabled>
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <button type="submit"
                                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                                    data-keyboard="false" @click="completeProductLoadProcess" v-show="!isUpdateState" :disabled="isLoading">Save</button>
                                                    <button type="submit"
                                                    class="btn btn-primary waves-effect" data-backdrop="static"
                                                    data-keyboard="false" @click="resetAllFields()">Reset</button>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

</div>


<script>
    new Vue({
        el: '#add_data_section',
        data: {
            searchPageNo: 1,
            searchedItemCount: {
                total: 0,
                loadMore: false
            },
            allSearchedData: [],
            isSearchLoading: false,
            searchText: '',
            orderID: null,
            branch: '',
            errorResponse: null,
            successResponse: null,
            isDisable: false,
            isLoading: false,
            isUpdateState: false,
            product_load_on_scan: true,
            categoryFilter: [],
            allCategory: [],
            category: "",
            categoryName: "",
            productName: "",
            categoryWiseProductListFilter: [],
            categoryWiseProductList: [],
            barcode: "",
            costPrice: null,
            currentStock: null,
            total: 0,
            quantity: 1,
            vat: 0,
            selectedItem: "",
            requestedProducts: [],
            totalQuantity: null,
            grandTotal: null,
            searchSupplier: "",
            requisitionNo: "",
            _id: "",
            downloadRequestID: null,
            searchQueryStringRequest: ''
        },
        mounted() {
            this.checkBranchInfo()
            this.getBranchInfo()
            this.getCategoryInfo()
            this.getCurrentDate()
        },
        methods: {
            changeCostPrice(costPrice){
                this.selectedItem.price.purchase = costPrice
            },
            filterCategoryList(){
                if(this.categoryName!=""){
                    let search = new RegExp(this.categoryName , 'i');
                    this.categoryFilter = this.allCategory.filter(categoryInfo => search.test(categoryInfo.name))
                }else{
                    this.categoryFilter = this.allCategory
                }
            },
            filterSupplierWiseProductList(){
                if(this.productName!=""){
                    let search = new RegExp(this.productName , 'i');
                    this.categoryWiseProductListFilter = this.categoryWiseProductList.filter(productInfo => search.test(productInfo.name))
                }else{
                    this.categoryWiseProductListFilter = this.categoryWiseProductList
                }
            },
            supplierSearchData(data){
                this.categoryName = data.name
                this.category = data
                this.getProductCategoryWise()
            },
            categoryWiseProductSearchData(data){
                this.productName = data.name
                this.selectedItem = data
                this.autoFillProductInfo()
            },
            completeProductLoadProcess(){
                if(this.requestedProducts.length>0){
                    this.isLoading = true
                    let requestLink = '/api/software-replace'
                    let token = localStorage.getItem('token')

                    let itemInfo = {
                        category: this.category.id,
                        totalQuantity: this.totalQuantity,
                        totalAmount: this.grandTotal,
                        products: this.requestedProducts,
                        branch: this.branch,
                    }

                    updateDataInfo(requestLink, itemInfo, token).then((result) => {
                        if (result.auth == true) {
                            this.successResponse = result.response
                            this.clear_forms()
                            this.isUpdateState = true
                        } else {
                            this.errorResponse = result.response
                        }
                        this.isLoading = false
                        $('html, body').animate({
                            scrollTop: 0
                        }, 'slow', function () {});
                    })
                }else{
                    alert("Sorry no product selected yet.")
                }
            },
            totalCalculation(){
                let totalCost = 0
                let totalQuantity = 0
                this.requestedProducts.map((requestDetail, index)=>{
                    totalQuantity += Number(requestDetail.product.quantity)
                    totalCost += Number((Number(requestDetail.product.quantity)*Number(requestDetail.product.price.purchase)).toFixed(2))

                    if((this.requestedProducts.length-1)==index){
                        this.totalQuantity = totalQuantity
                        this.grandTotal = totalCost
                    }
                })
            },
            changeProductAddOnScan(){
                if(this.product_load_on_scan){
                    this.quantity = 1
                }else{
                    this.quantity = 0
                }
            },
            resetAllFields(){
                this.clear_forms()
                this.downloadRequestID = null
                this.isUpdateState = false
                this.requestedProducts = []
                this.categoryWiseProductList = []
                this.categoryWiseProductListFilter = []
                this.category = ""
                this.categoryName = ""
                this.totalQuantity = null
                this.grandTotal = null
            },
            clear_forms(){
                this._id = ""
                this.barcode = ""
                this.productName = ""
                this.selectedItem = ""
                this.costPrice = null
                this.currentStock = null
                this.total = 0
                this.getCurrentDate()
            },
            updateInfo(index){
                let purchase_price = Number($("#purchase_price_"+index).val())
                let sell_price = Number($("#sell_price_"+index).val())
                let quantity = Number($("#quantity_"+index).val())

                this.requestedProducts[index].product.price.purchase = purchase_price
                this.requestedProducts[index].product.price.sell = sell_price
                this.requestedProducts[index].product.quantity = quantity
                this.requestedProducts[index].product.total = Number((quantity * purchase_price).toFixed(2))

                this.totalCalculation()
            },
            removeInfo(index) {
                this.clear_forms()
                this.requestedProducts.splice(index, 1)
                this.totalCalculation()
            },
            addProduct(){
                if(this.barcode=="" || this.selectedItem.name==""){
                    return alert("Insert product info correctly.");
                }

                let indexNo = null

                let searchResult = this.requestedProducts.filter((productInfo, index)=>{
                    indexNo = index
                    return productInfo.product.barcode == this.barcode
                })

                if(searchResult.length > 0){
                    this.requestedProducts[indexNo].product.quantity += Number(this.quantity) 
                }else{
                    this.requestedProducts.push({
                        category: this.category.id,
                        product:{
                            _id: this.selectedItem._id,
                            barcode: this.barcode,
                            name: this.selectedItem.name,
                            price: this.selectedItem.price,
                            stock: this.currentStock,
                            total: Number(this.total.toFixed(2)),
                            quantity: Number(this.quantity),
                            vat: this.selectedItem.vat
                        }
                    })
                    $("#barcodeField").focus()
                }

                this.totalCalculation()
                this.clear_forms()
            },
            changeQuantity(){
                if(this.costPrice>-1){
                    this.total = this.quantity*this.costPrice
                }
            },
            autoFillProductInfo(){
                if(this.selectedItem==""){

                }else{
                    this._id = this.selectedItem._id
                    this.barcode = this.selectedItem.barcode
                    this.costPrice = this.selectedItem.price.purchase
                    this.currentStock = this.selectedItem.quantity
                    this.total = this.selectedItem.price.purchase * this.quantity
                    $("#barcodeField").focus()
                    if(this.product_load_on_scan==true){
                        this.quantity = 1
                    }else{
                        this.quantity = 0
                    }
                }
            },
            getProductCategoryWise(){
                if(this.category==""){
                    this.categoryWiseProductList = []
                    this.categoryWiseProductListFilter = []
                }else{
                    let branchID = localStorage.getItem('branch')
                    let requestLink = '/api/product/category-wise/product' +
                        '?category=' + this.category.id +
                        '&branch=' +
                        branchID  

                    this.isSearchLoading = true
                    getType(requestLink).then((result) => {
                        if (result.auth === true) {
                            console.log(result.response.data)
                            this.productName = ""
                            this.categoryWiseProductListFilter = result.response.data
                            this.categoryWiseProductList = result.response.data
                            this.isSearchLoading = false
                        }
                    })
                }
            },
            getCurrentDate(){
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                var yyyy = today.getFullYear();
                
                today = yyyy + '-' + mm + '-' + dd;
            },
            getCategoryInfo() {
                let requestLink = '/api/category?branch='+localStorage.getItem('branch')
                getType(requestLink).then((result) => {
                    if (result.auth === true) {
                        this.categoryName = ""
                        this.allCategory = result.response.data
                        this.categoryFilter = result.response.data
                    }
                })
            },
            searchReset() {
                this.searchPageNo = 1
                this.searchedItemCount = {
                    total: 0,
                    loadMore: false
                }
                this.allSearchedData = []
            },
            clearResponseMessage() {
                this.errorResponse = null
                this.successResponse = null
            },
            changeBranch() {
                localStorage.removeItem('branch')
                localStorage.setItem('referrerURL', window.location.href)
                location.href = '<%= host %>' + '/product/branch/select'
            },
            getBarCode(e, barcode) {
                this.addItem(barcode)
            },
            checkBranchInfo() {
                if (localStorage.getItem('branch')) {
                    let branchID = localStorage.getItem('branch')

                    let requestLink = '/api/branch/data/' + branchID
                    getType(requestLink).then((result) => {
                        if (result.auth === true) {
                            this.branch = {
                                id: result.response.data._id,
                                serialNo: result.response.data.serialNo,
                                name: result.response.data.name,
                                address: result.response.data.address,
                                thana: result.response.data.thana.name,
                                district: result.response.data.district.name,
                                phone: result.response.data.phone,
                                flat_order: result.response.data.flat_order,
                                point_bench_mark: result.response.data.point_settings.bench_mark,
                                point_purchase: result.response.data.point_settings.purchase,
                                point_expand: result.response.data.point_settings.expand,
                                use_points_on: result.response.data.point_settings.use_points_on
                            }
                        } else {
                            localStorage.removeItem('branch')
                            localStorage.setItem('referrerURL', window.location.href)
                            location.href = '<%= host %>' + '/product/branch/select'
                        }
                    })
                } else {
                    localStorage.removeItem('branch')
                    localStorage.setItem('referrerURL', window.location.href)
                    location.href = '<%= host %>' + '/product/branch/select'
                }
            },
            getBranchInfo() {
                let requestLink = '/api/branch'
                getType(requestLink).then((result) => {
                    if (result.auth === true) {
                        this.allBranch = result.response.data
                    }
                })
            },
            addItem(barcode) {
                let product = this.categoryWiseProductList.filter((product, index)=>{
                    return product.barcode == barcode
                })
                if(product.length>0){
                    this.selectedItem = product[0]
                    this.productName = this.selectedItem.name
                    this.costPrice = this.selectedItem.price.purchase
                    this.currentStock = this.selectedItem.quantity
                    this.total = this.selectedItem.price.purchase * this.quantity

                    if(this.product_load_on_scan==true){
                        this.quantity = 1
                    }else{
                        this.quantity = 0
                    }
                }else{
                    alert("No product found")
                }
            },
            checkSearchedDataInCart(id) {
                let flag = 0

                for (let i = 0; i < this.cart.length; i++) {
                    if (this.cart[i].product._id == id) {
                        flag = 1
                    }
                }

                if (flag == 1) {
                    return true
                } else {
                    return false
                }
            }
        }
    })
</script>

<script>
$(function () {
    //Datetimepicker plugin
    $('.datetimepicker').bootstrapMaterialDatePicker({
        format: 'YYYY-MM-DD',
        clearButton: true,
        weekStart: 1,
        time: false
    });
  });

  $("#add_data_section" ).on( 'wheel', function() {
    $('input[type=number]').on('mousewheel',function(e){ $(this).blur(); });
 });
  </script>

<% include ../../partials/footer %>
